/*
 * generated by Xtext 2.34.0
 */
package org.xtext.project.tdsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.xbase.lib.util.ReflectExtensions
import org.eclipse.xtext.xbase.testing.CompilationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(TDslInjectorProvider)
class TDslCodeGenTest {
	
    @Inject extension CompilationTestHelper
	@Inject extension ReflectExtensions
    
    	// checks that the Java code compiles
	@Test
	def void testJavaCode() {
		'''
		-> On center button touched do:
					- drive forward
		'''.compile[getCompiledClasses]
	}
	
	// checks that the Java classes match the program elements
	@Test
	def void testRecipeName() {
		'''
		-> On center button touched do:
		- drive forward
		'''.compile[
			// checks that the class was correctly compiled
			val thymioDSL = getCompiledClass("ThymioDSL").getDeclaredConstructor.newInstance
			Assertions.assertNotNull(thymioDSL)
//			// checks that there is a single recipe
//			val recipes = book.invoke("getRecipes")
//			Assertions.assertEquals(1, recipes.invoke("size"))
//			// checks that it's a recipe of Cookies
//			val recipe = (book.invoke("getRecipes")).invoke("get",0).invoke("getName")
//			Assertions.assertEquals("Cookies", recipe)
//			// checks that the recipe has 3 ingredients
//			val ingredients = recipe.invoke("getIngredients")
//			Assertions.assertEquals(3, ingredients.invoke("size"))
//			// checks that the recipe has 4 instruction steps
//			val instructions = recipe.invoke("getInstructions")
//			Assertions.assertEquals(4, instructions.invoke("size"))
		]
	}

}
