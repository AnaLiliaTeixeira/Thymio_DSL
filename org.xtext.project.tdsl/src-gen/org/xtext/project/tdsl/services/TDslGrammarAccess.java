/*
 * generated by Xtext 2.34.0
 */
package org.xtext.project.tdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ThymioDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.ThymioDSL");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_0 = (RuleCall)cStatementAssignment.eContents().get(0);
		
		//ThymioDSL returns ThymioDSL:
		//    (statement+=Statement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment() { return cStatementAssignment; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_0() { return cStatementStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIfstatementAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIfstatementIfStatementParserRuleCall_2_0_0 = (RuleCall)cIfstatementAssignment_2_0.eContents().get(0);
		private final Assignment cActionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_2_1_0 = (RuleCall)cActionAssignment_2_1.eContents().get(0);
		
		//Statement returns Statement:
		//    '->' event=Event
		//    (ifstatement+=IfStatement | action+=Action)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' event=Event
		//(ifstatement+=IfStatement | action+=Action)+
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//event=Event
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_1_0() { return cEventEventParserRuleCall_1_0; }
		
		//(ifstatement+=IfStatement | action+=Action)+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ifstatement+=IfStatement
		public Assignment getIfstatementAssignment_2_0() { return cIfstatementAssignment_2_0; }
		
		//IfStatement
		public RuleCall getIfstatementIfStatementParserRuleCall_2_0_0() { return cIfstatementIfStatementParserRuleCall_2_0_0; }
		
		//action+=Action
		public Assignment getActionAssignment_2_1() { return cActionAssignment_2_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_2_1_0() { return cActionActionParserRuleCall_2_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpperEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProxEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTapEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClapEventParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Event returns Event:
		//    UpperEvent | ProxEvent | TapEvent | ClapEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//UpperEvent | ProxEvent | TapEvent | ClapEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UpperEvent
		public RuleCall getUpperEventParserRuleCall_0() { return cUpperEventParserRuleCall_0; }
		
		//ProxEvent
		public RuleCall getProxEventParserRuleCall_1() { return cProxEventParserRuleCall_1; }
		
		//TapEvent
		public RuleCall getTapEventParserRuleCall_2() { return cTapEventParserRuleCall_2; }
		
		//ClapEvent
		public RuleCall getClapEventParserRuleCall_3() { return cClapEventParserRuleCall_3; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cMovementActionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSoundActionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cColorBottomActionParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cColorTopActionParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		
		//Action returns Action:
		//    '-' (MovementAction | SoundAction | ColorBottomAction | ColorTopAction);
		@Override public ParserRule getRule() { return rule; }
		
		//'-' (MovementAction | SoundAction | ColorBottomAction | ColorTopAction)
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//(MovementAction | SoundAction | ColorBottomAction | ColorTopAction)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//MovementAction
		public RuleCall getMovementActionParserRuleCall_1_0() { return cMovementActionParserRuleCall_1_0; }
		
		//SoundAction
		public RuleCall getSoundActionParserRuleCall_1_1() { return cSoundActionParserRuleCall_1_1; }
		
		//ColorBottomAction
		public RuleCall getColorBottomActionParserRuleCall_1_2() { return cColorBottomActionParserRuleCall_1_2; }
		
		//ColorTopAction
		public RuleCall getColorTopActionParserRuleCall_1_3() { return cColorTopActionParserRuleCall_1_3; }
	}
	public class MovementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.MovementAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDriveKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDirectionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cDirectionAlternatives_0_1_0 = (Alternatives)cDirectionAssignment_0_1.eContents().get(0);
		private final Keyword cDirectionForwardKeyword_0_1_0_0 = (Keyword)cDirectionAlternatives_0_1_0.eContents().get(0);
		private final Keyword cDirectionBackwardKeyword_0_1_0_1 = (Keyword)cDirectionAlternatives_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cWithKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cSpeedKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cSpeedAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cSpeedArithmeticExpressionParserRuleCall_0_2_2_0 = (RuleCall)cSpeedAssignment_0_2_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTurnKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDirectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDirectionRightLeftParserRuleCall_1_1_0 = (RuleCall)cDirectionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMovementActionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDirectionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cDirectionDrivingKeyword_2_2_0 = (Keyword)cDirectionAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cMovementActionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cStopKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDirectionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Keyword cDirectionTurningKeyword_3_2_0 = (Keyword)cDirectionAssignment_3_2.eContents().get(0);
		
		//MovementAction returns MovementAction:
		//    'drive' direction=("forward" | "backward") ('with' 'speed' speed=ArithmeticExpression)?
		//    | 'turn' direction=RightLeft
		//    | {MovementAction} 'stop' direction='driving'
		//    | {MovementAction} 'stop' direction='turning';
		@Override public ParserRule getRule() { return rule; }
		
		//'drive' direction=("forward" | "backward") ('with' 'speed' speed=ArithmeticExpression)?
		//| 'turn' direction=RightLeft
		//| {MovementAction} 'stop' direction='driving'
		//| {MovementAction} 'stop' direction='turning'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'drive' direction=("forward" | "backward") ('with' 'speed' speed=ArithmeticExpression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'drive'
		public Keyword getDriveKeyword_0_0() { return cDriveKeyword_0_0; }
		
		//direction=("forward" | "backward")
		public Assignment getDirectionAssignment_0_1() { return cDirectionAssignment_0_1; }
		
		//("forward" | "backward")
		public Alternatives getDirectionAlternatives_0_1_0() { return cDirectionAlternatives_0_1_0; }
		
		//"forward"
		public Keyword getDirectionForwardKeyword_0_1_0_0() { return cDirectionForwardKeyword_0_1_0_0; }
		
		//"backward"
		public Keyword getDirectionBackwardKeyword_0_1_0_1() { return cDirectionBackwardKeyword_0_1_0_1; }
		
		//('with' 'speed' speed=ArithmeticExpression)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'with'
		public Keyword getWithKeyword_0_2_0() { return cWithKeyword_0_2_0; }
		
		//'speed'
		public Keyword getSpeedKeyword_0_2_1() { return cSpeedKeyword_0_2_1; }
		
		//speed=ArithmeticExpression
		public Assignment getSpeedAssignment_0_2_2() { return cSpeedAssignment_0_2_2; }
		
		//ArithmeticExpression
		public RuleCall getSpeedArithmeticExpressionParserRuleCall_0_2_2_0() { return cSpeedArithmeticExpressionParserRuleCall_0_2_2_0; }
		
		//'turn' direction=RightLeft
		public Group getGroup_1() { return cGroup_1; }
		
		//'turn'
		public Keyword getTurnKeyword_1_0() { return cTurnKeyword_1_0; }
		
		//direction=RightLeft
		public Assignment getDirectionAssignment_1_1() { return cDirectionAssignment_1_1; }
		
		//RightLeft
		public RuleCall getDirectionRightLeftParserRuleCall_1_1_0() { return cDirectionRightLeftParserRuleCall_1_1_0; }
		
		//{MovementAction} 'stop' direction='driving'
		public Group getGroup_2() { return cGroup_2; }
		
		//{MovementAction}
		public Action getMovementActionAction_2_0() { return cMovementActionAction_2_0; }
		
		//'stop'
		public Keyword getStopKeyword_2_1() { return cStopKeyword_2_1; }
		
		//direction='driving'
		public Assignment getDirectionAssignment_2_2() { return cDirectionAssignment_2_2; }
		
		//'driving'
		public Keyword getDirectionDrivingKeyword_2_2_0() { return cDirectionDrivingKeyword_2_2_0; }
		
		//{MovementAction} 'stop' direction='turning'
		public Group getGroup_3() { return cGroup_3; }
		
		//{MovementAction}
		public Action getMovementActionAction_3_0() { return cMovementActionAction_3_0; }
		
		//'stop'
		public Keyword getStopKeyword_3_1() { return cStopKeyword_3_1; }
		
		//direction='turning'
		public Assignment getDirectionAssignment_3_2() { return cDirectionAssignment_3_2; }
		
		//'turning'
		public Keyword getDirectionTurningKeyword_3_2_0() { return cDirectionTurningKeyword_3_2_0; }
	}
	public class SoundActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.SoundAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlayKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cSoundKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSoundAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSoundSoundParserRuleCall_0_2_0 = (RuleCall)cSoundAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSoundActionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cPlayingKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cSoundKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SoundAction returns SoundAction:
		//    'play' 'sound' sound=Sound
		//    | {SoundAction} 'stop' 'playing' 'sound';
		@Override public ParserRule getRule() { return rule; }
		
		//'play' 'sound' sound=Sound
		//| {SoundAction} 'stop' 'playing' 'sound'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'play' 'sound' sound=Sound
		public Group getGroup_0() { return cGroup_0; }
		
		//'play'
		public Keyword getPlayKeyword_0_0() { return cPlayKeyword_0_0; }
		
		//'sound'
		public Keyword getSoundKeyword_0_1() { return cSoundKeyword_0_1; }
		
		//sound=Sound
		public Assignment getSoundAssignment_0_2() { return cSoundAssignment_0_2; }
		
		//Sound
		public RuleCall getSoundSoundParserRuleCall_0_2_0() { return cSoundSoundParserRuleCall_0_2_0; }
		
		//{SoundAction} 'stop' 'playing' 'sound'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SoundAction}
		public Action getSoundActionAction_1_0() { return cSoundActionAction_1_0; }
		
		//'stop'
		public Keyword getStopKeyword_1_1() { return cStopKeyword_1_1; }
		
		//'playing'
		public Keyword getPlayingKeyword_1_2() { return cPlayingKeyword_1_2; }
		
		//'sound'
		public Keyword getSoundKeyword_1_3() { return cSoundKeyword_1_3; }
	}
	public class ColorBottomActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.ColorBottomAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cBottomKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cColorKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cToKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cColorAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cColorColorParserRuleCall_0_4_0 = (RuleCall)cColorAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cColorBottomActionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTurnKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cOffKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cBottomKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLedsKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ColorBottomAction returns ColorBottomAction:
		//    'set' 'bottom' 'color' 'to' color=Color
		//    | {ColorBottomAction} 'turn' 'off' 'bottom' 'leds';
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'bottom' 'color' 'to' color=Color
		//| {ColorBottomAction} 'turn' 'off' 'bottom' 'leds'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'set' 'bottom' 'color' 'to' color=Color
		public Group getGroup_0() { return cGroup_0; }
		
		//'set'
		public Keyword getSetKeyword_0_0() { return cSetKeyword_0_0; }
		
		//'bottom'
		public Keyword getBottomKeyword_0_1() { return cBottomKeyword_0_1; }
		
		//'color'
		public Keyword getColorKeyword_0_2() { return cColorKeyword_0_2; }
		
		//'to'
		public Keyword getToKeyword_0_3() { return cToKeyword_0_3; }
		
		//color=Color
		public Assignment getColorAssignment_0_4() { return cColorAssignment_0_4; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_0_4_0() { return cColorColorParserRuleCall_0_4_0; }
		
		//{ColorBottomAction} 'turn' 'off' 'bottom' 'leds'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ColorBottomAction}
		public Action getColorBottomActionAction_1_0() { return cColorBottomActionAction_1_0; }
		
		//'turn'
		public Keyword getTurnKeyword_1_1() { return cTurnKeyword_1_1; }
		
		//'off'
		public Keyword getOffKeyword_1_2() { return cOffKeyword_1_2; }
		
		//'bottom'
		public Keyword getBottomKeyword_1_3() { return cBottomKeyword_1_3; }
		
		//'leds'
		public Keyword getLedsKeyword_1_4() { return cLedsKeyword_1_4; }
	}
	public class ColorTopActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.ColorTopAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cTopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cColorKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cToKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cColorAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cColorColorParserRuleCall_0_4_0 = (RuleCall)cColorAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cColorTopActionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTurnKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cOffKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cTopKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLedsKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ColorTopAction returns ColorTopAction:
		//    'set' 'top' 'color' 'to' color=Color
		//    | {ColorTopAction} 'turn' 'off' 'top' 'leds';
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'top' 'color' 'to' color=Color
		//| {ColorTopAction} 'turn' 'off' 'top' 'leds'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'set' 'top' 'color' 'to' color=Color
		public Group getGroup_0() { return cGroup_0; }
		
		//'set'
		public Keyword getSetKeyword_0_0() { return cSetKeyword_0_0; }
		
		//'top'
		public Keyword getTopKeyword_0_1() { return cTopKeyword_0_1; }
		
		//'color'
		public Keyword getColorKeyword_0_2() { return cColorKeyword_0_2; }
		
		//'to'
		public Keyword getToKeyword_0_3() { return cToKeyword_0_3; }
		
		//color=Color
		public Assignment getColorAssignment_0_4() { return cColorAssignment_0_4; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_0_4_0() { return cColorColorParserRuleCall_0_4_0; }
		
		//{ColorTopAction} 'turn' 'off' 'top' 'leds'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ColorTopAction}
		public Action getColorTopActionAction_1_0() { return cColorTopActionAction_1_0; }
		
		//'turn'
		public Keyword getTurnKeyword_1_1() { return cTurnKeyword_1_1; }
		
		//'off'
		public Keyword getOffKeyword_1_2() { return cOffKeyword_1_2; }
		
		//'top'
		public Keyword getTopKeyword_1_3() { return cTopKeyword_1_3; }
		
		//'leds'
		public Keyword getLedsKeyword_1_4() { return cLedsKeyword_1_4; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfStatement returns IfStatement:
		//    'If' condition=Condition ':'
		//    (action+=Action)+
		//    'End' 'if';
		@Override public ParserRule getRule() { return rule; }
		
		//'If' condition=Condition ':'
		//(action+=Action)+
		//'End' 'if'
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(action+=Action)+
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_3_0() { return cActionActionParserRuleCall_3_0; }
		
		//'End'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'if'
		public Keyword getIfKeyword_5() { return cIfKeyword_5; }
	}
	public class UpperEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.UpperEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cButtonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cButtonButtonParserRuleCall_1_0 = (RuleCall)cButtonAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cButtonAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cButtonButtonParserRuleCall_2_1_0 = (RuleCall)cButtonAssignment_2_1.eContents().get(0);
		private final Keyword cButtonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateStateParserRuleCall_4_0 = (RuleCall)cStateAssignment_4.eContents().get(0);
		private final Keyword cDoKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UpperEvent returns UpperEvent:
		//    'On' button+=Button ('and' button+=Button)* 'button' state=State 'do' ':';
		@Override public ParserRule getRule() { return rule; }
		
		//'On' button+=Button ('and' button+=Button)* 'button' state=State 'do' ':'
		public Group getGroup() { return cGroup; }
		
		//'On'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//button+=Button
		public Assignment getButtonAssignment_1() { return cButtonAssignment_1; }
		
		//Button
		public RuleCall getButtonButtonParserRuleCall_1_0() { return cButtonButtonParserRuleCall_1_0; }
		
		//('and' button+=Button)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'and'
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }
		
		//button+=Button
		public Assignment getButtonAssignment_2_1() { return cButtonAssignment_2_1; }
		
		//Button
		public RuleCall getButtonButtonParserRuleCall_2_1_0() { return cButtonButtonParserRuleCall_2_1_0; }
		
		//'button'
		public Keyword getButtonKeyword_3() { return cButtonKeyword_3; }
		
		//state=State
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }
		
		//State
		public RuleCall getStateStateParserRuleCall_4_0() { return cStateStateParserRuleCall_4_0; }
		
		//'do'
		public Keyword getDoKeyword_5() { return cDoKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.Button");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameButtonsParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Button returns Button:
		//    name = Buttons;
		@Override public ParserRule getRule() { return rule; }
		
		//name = Buttons
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//Buttons
		public RuleCall getNameButtonsParserRuleCall_0() { return cNameButtonsParserRuleCall_0; }
	}
	public class ProxEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.ProxEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSensorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSensorSensorParserRuleCall_1_0 = (RuleCall)cSensorAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProxEvent returns ProxEvent:
		//    'On' sensor=Sensor 'do' ':';
		@Override public ParserRule getRule() { return rule; }
		
		//'On' sensor=Sensor 'do' ':'
		public Group getGroup() { return cGroup; }
		
		//'On'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//sensor=Sensor
		public Assignment getSensorAssignment_1() { return cSensorAssignment_1; }
		
		//Sensor
		public RuleCall getSensorSensorParserRuleCall_1_0() { return cSensorSensorParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDirectionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDirectionHorizontalSensorsParserRuleCall_0_0_0 = (RuleCall)cDirectionAssignment_0_0.eContents().get(0);
		private final Assignment cSensor_typeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cSensor_typeHorizontalKeyword_0_1_0 = (Keyword)cSensor_typeAssignment_0_1.eContents().get(0);
		private final Keyword cSensorKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cDetectingKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cStateAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStateState_Horizontal_SensorParserRuleCall_0_4_0 = (RuleCall)cStateAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDirectionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDirectionRightLeftParserRuleCall_1_0_0 = (RuleCall)cDirectionAssignment_1_0.eContents().get(0);
		private final Assignment cSensor_typeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSensor_typeGroundKeyword_1_1_0 = (Keyword)cSensor_typeAssignment_1_1.eContents().get(0);
		private final Keyword cSensorKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cDetectingKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStateAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cStateState_Ground_SensorParserRuleCall_1_4_0 = (RuleCall)cStateAssignment_1_4.eContents().get(0);
		
		//Sensor returns Sensor:
		//    direction=HorizontalSensors sensor_type='horizontal' 'sensor' 'detecting' state = State_Horizontal_Sensor
		//    | direction=RightLeft sensor_type='ground' 'sensor' 'detecting' state = State_Ground_Sensor;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=HorizontalSensors sensor_type='horizontal' 'sensor' 'detecting' state = State_Horizontal_Sensor
		//| direction=RightLeft sensor_type='ground' 'sensor' 'detecting' state = State_Ground_Sensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//direction=HorizontalSensors sensor_type='horizontal' 'sensor' 'detecting' state = State_Horizontal_Sensor
		public Group getGroup_0() { return cGroup_0; }
		
		//direction=HorizontalSensors
		public Assignment getDirectionAssignment_0_0() { return cDirectionAssignment_0_0; }
		
		//HorizontalSensors
		public RuleCall getDirectionHorizontalSensorsParserRuleCall_0_0_0() { return cDirectionHorizontalSensorsParserRuleCall_0_0_0; }
		
		//sensor_type='horizontal'
		public Assignment getSensor_typeAssignment_0_1() { return cSensor_typeAssignment_0_1; }
		
		//'horizontal'
		public Keyword getSensor_typeHorizontalKeyword_0_1_0() { return cSensor_typeHorizontalKeyword_0_1_0; }
		
		//'sensor'
		public Keyword getSensorKeyword_0_2() { return cSensorKeyword_0_2; }
		
		//'detecting'
		public Keyword getDetectingKeyword_0_3() { return cDetectingKeyword_0_3; }
		
		//state = State_Horizontal_Sensor
		public Assignment getStateAssignment_0_4() { return cStateAssignment_0_4; }
		
		//State_Horizontal_Sensor
		public RuleCall getStateState_Horizontal_SensorParserRuleCall_0_4_0() { return cStateState_Horizontal_SensorParserRuleCall_0_4_0; }
		
		//direction=RightLeft sensor_type='ground' 'sensor' 'detecting' state = State_Ground_Sensor
		public Group getGroup_1() { return cGroup_1; }
		
		//direction=RightLeft
		public Assignment getDirectionAssignment_1_0() { return cDirectionAssignment_1_0; }
		
		//RightLeft
		public RuleCall getDirectionRightLeftParserRuleCall_1_0_0() { return cDirectionRightLeftParserRuleCall_1_0_0; }
		
		//sensor_type='ground'
		public Assignment getSensor_typeAssignment_1_1() { return cSensor_typeAssignment_1_1; }
		
		//'ground'
		public Keyword getSensor_typeGroundKeyword_1_1_0() { return cSensor_typeGroundKeyword_1_1_0; }
		
		//'sensor'
		public Keyword getSensorKeyword_1_2() { return cSensorKeyword_1_2; }
		
		//'detecting'
		public Keyword getDetectingKeyword_1_3() { return cDetectingKeyword_1_3; }
		
		//state = State_Ground_Sensor
		public Assignment getStateAssignment_1_4() { return cStateAssignment_1_4; }
		
		//State_Ground_Sensor
		public RuleCall getStateState_Ground_SensorParserRuleCall_1_4_0() { return cStateState_Ground_SensorParserRuleCall_1_4_0; }
	}
	public class TapEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.TapEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTapEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTapKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TapEvent returns Event:
		//    {TapEvent} 'On' 'tap' 'do' ':';
		@Override public ParserRule getRule() { return rule; }
		
		//{TapEvent} 'On' 'tap' 'do' ':'
		public Group getGroup() { return cGroup; }
		
		//{TapEvent}
		public Action getTapEventAction_0() { return cTapEventAction_0; }
		
		//'On'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//'tap'
		public Keyword getTapKeyword_2() { return cTapKeyword_2; }
		
		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
	}
	public class ClapEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.ClapEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClapEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClapKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClapEvent returns Event:
		//    {ClapEvent} 'On' 'clap' 'do' ':';
		@Override public ParserRule getRule() { return rule; }
		
		//{ClapEvent} 'On' 'clap' 'do' ':'
		public Group getGroup() { return cGroup; }
		
		//{ClapEvent}
		public Action getClapEventAction_0() { return cClapEventAction_0; }
		
		//'On'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//'clap'
		public Keyword getClapKeyword_2() { return cClapKeyword_2; }
		
		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftSensorSensorParserRuleCall_0_0 = (RuleCall)cLeftSensorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorAlternatives_1_0_0 = (Alternatives)cOperatorAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorAndKeyword_1_0_0_0 = (Keyword)cOperatorAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorOrKeyword_1_0_0_1 = (Keyword)cOperatorAlternatives_1_0_0.eContents().get(1);
		private final Assignment cRightSensorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSensorSensorParserRuleCall_1_1_0 = (RuleCall)cRightSensorAssignment_1_1.eContents().get(0);
		
		//Condition returns Condition:
		//    leftSensor=Sensor (operator=('and' | 'or') rightSensor=Sensor)?;
		@Override public ParserRule getRule() { return rule; }
		
		//leftSensor=Sensor (operator=('and' | 'or') rightSensor=Sensor)?
		public Group getGroup() { return cGroup; }
		
		//leftSensor=Sensor
		public Assignment getLeftSensorAssignment_0() { return cLeftSensorAssignment_0; }
		
		//Sensor
		public RuleCall getLeftSensorSensorParserRuleCall_0_0() { return cLeftSensorSensorParserRuleCall_0_0; }
		
		//(operator=('and' | 'or') rightSensor=Sensor)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=('and' | 'or')
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//('and' | 'or')
		public Alternatives getOperatorAlternatives_1_0_0() { return cOperatorAlternatives_1_0_0; }
		
		//'and'
		public Keyword getOperatorAndKeyword_1_0_0_0() { return cOperatorAndKeyword_1_0_0_0; }
		
		//'or'
		public Keyword getOperatorOrKeyword_1_0_0_1() { return cOperatorOrKeyword_1_0_0_1; }
		
		//rightSensor=Sensor
		public Assignment getRightSensorAssignment_1_1() { return cRightSensorAssignment_1_1; }
		
		//Sensor
		public RuleCall getRightSensorSensorParserRuleCall_1_1_0() { return cRightSensorSensorParserRuleCall_1_1_0; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.ArithmeticExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftEIntegerObjectParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorAlternatives_1_0_0 = (Alternatives)cOperatorAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_0_0_0 = (Keyword)cOperatorAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_0_0_1 = (Keyword)cOperatorAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOperatorAsteriskKeyword_1_0_0_2 = (Keyword)cOperatorAlternatives_1_0_0.eContents().get(2);
		private final Keyword cOperatorSolidusKeyword_1_0_0_3 = (Keyword)cOperatorAlternatives_1_0_0.eContents().get(3);
		private final Keyword cOperatorModKeyword_1_0_0_4 = (Keyword)cOperatorAlternatives_1_0_0.eContents().get(4);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEIntegerObjectParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ArithmeticExpression returns ArithmeticExpression:
		//    left=EIntegerObject (operator=('+' | '-' | '*' | '/' | 'mod') right=EIntegerObject)?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=EIntegerObject (operator=('+' | '-' | '*' | '/' | 'mod') right=EIntegerObject)?
		public Group getGroup() { return cGroup; }
		
		//left=EIntegerObject
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//EIntegerObject
		public RuleCall getLeftEIntegerObjectParserRuleCall_0_0() { return cLeftEIntegerObjectParserRuleCall_0_0; }
		
		//(operator=('+' | '-' | '*' | '/' | 'mod') right=EIntegerObject)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=('+' | '-' | '*' | '/' | 'mod')
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//('+' | '-' | '*' | '/' | 'mod')
		public Alternatives getOperatorAlternatives_1_0_0() { return cOperatorAlternatives_1_0_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_0_0_0() { return cOperatorPlusSignKeyword_1_0_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_0_0_1() { return cOperatorHyphenMinusKeyword_1_0_0_1; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_0_0_2() { return cOperatorAsteriskKeyword_1_0_0_2; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_0_0_3() { return cOperatorSolidusKeyword_1_0_0_3; }
		
		//'mod'
		public Keyword getOperatorModKeyword_1_0_0_4() { return cOperatorModKeyword_1_0_0_4; }
		
		//right=EIntegerObject
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//EIntegerObject
		public RuleCall getRightEIntegerObjectParserRuleCall_1_1_0() { return cRightEIntegerObjectParserRuleCall_1_1_0; }
	}
	public class EIntegerObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.EIntegerObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////-----------------------------LITERALS OR CONSTANTS------------------------------------------
		//EIntegerObject returns ecore::EIntegerObject:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreenKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBlueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBlackKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cWhiteKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cYellowKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPinkKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOrangeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Color:
		//    ('red' | 'green' | 'blue' | 'black' | 'white' | 'yellow' | 'pink' | 'orange');
		@Override public ParserRule getRule() { return rule; }
		
		//('red' | 'green' | 'blue' | 'black' | 'white' | 'yellow' | 'pink' | 'orange')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'red'
		public Keyword getRedKeyword_0() { return cRedKeyword_0; }
		
		//'green'
		public Keyword getGreenKeyword_1() { return cGreenKeyword_1; }
		
		//'blue'
		public Keyword getBlueKeyword_2() { return cBlueKeyword_2; }
		
		//'black'
		public Keyword getBlackKeyword_3() { return cBlackKeyword_3; }
		
		//'white'
		public Keyword getWhiteKeyword_4() { return cWhiteKeyword_4; }
		
		//'yellow'
		public Keyword getYellowKeyword_5() { return cYellowKeyword_5; }
		
		//'pink'
		public Keyword getPinkKeyword_6() { return cPinkKeyword_6; }
		
		//'orange'
		public Keyword getOrangeKeyword_7() { return cOrangeKeyword_7; }
	}
	public class SoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.Sound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSound1Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSound2Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSound3Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSound4Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Sound:
		//    'sound1' | 'sound2' | 'sound3' | 'sound4';
		@Override public ParserRule getRule() { return rule; }
		
		//'sound1' | 'sound2' | 'sound3' | 'sound4'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'sound1'
		public Keyword getSound1Keyword_0() { return cSound1Keyword_0; }
		
		//'sound2'
		public Keyword getSound2Keyword_1() { return cSound2Keyword_1; }
		
		//'sound3'
		public Keyword getSound3Keyword_2() { return cSound3Keyword_2; }
		
		//'sound4'
		public Keyword getSound4Keyword_3() { return cSound4Keyword_3; }
	}
	public class State_Horizontal_SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.State_Horizontal_Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cProximityKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cProximityKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//State_Horizontal_Sensor:
		//    'proximity' | 'no' 'proximity';
		@Override public ParserRule getRule() { return rule; }
		
		//'proximity' | 'no' 'proximity'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'proximity'
		public Keyword getProximityKeyword_0() { return cProximityKeyword_0; }
		
		//'no' 'proximity'
		public Group getGroup_1() { return cGroup_1; }
		
		//'no'
		public Keyword getNoKeyword_1_0() { return cNoKeyword_1_0; }
		
		//'proximity'
		public Keyword getProximityKeyword_1_1() { return cProximityKeyword_1_1; }
	}
	public class State_Ground_SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.State_Ground_Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cProximityKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cProximityKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cBlackKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cWhiteKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//State_Ground_Sensor:
		//'proximity' | 'no' 'proximity' | 'black' | 'white';
		@Override public ParserRule getRule() { return rule; }
		
		//'proximity' | 'no' 'proximity' | 'black' | 'white'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'proximity'
		public Keyword getProximityKeyword_0() { return cProximityKeyword_0; }
		
		//'no' 'proximity'
		public Group getGroup_1() { return cGroup_1; }
		
		//'no'
		public Keyword getNoKeyword_1_0() { return cNoKeyword_1_0; }
		
		//'proximity'
		public Keyword getProximityKeyword_1_1() { return cProximityKeyword_1_1; }
		
		//'black'
		public Keyword getBlackKeyword_2() { return cBlackKeyword_2; }
		
		//'white'
		public Keyword getWhiteKeyword_3() { return cWhiteKeyword_3; }
	}
	public class ButtonsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.Buttons");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCenterKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRightKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cForwardKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBackwardKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Buttons:
		//    'center' | 'right' | 'left' | 'forward' | 'backward';
		@Override public ParserRule getRule() { return rule; }
		
		//'center' | 'right' | 'left' | 'forward' | 'backward'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'center'
		public Keyword getCenterKeyword_0() { return cCenterKeyword_0; }
		
		//'right'
		public Keyword getRightKeyword_1() { return cRightKeyword_1; }
		
		//'left'
		public Keyword getLeftKeyword_2() { return cLeftKeyword_2; }
		
		//'forward'
		public Keyword getForwardKeyword_3() { return cForwardKeyword_3; }
		
		//'backward'
		public Keyword getBackwardKeyword_4() { return cBackwardKeyword_4; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTouchedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReleasedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//State:
		//    'touched' | 'released';
		@Override public ParserRule getRule() { return rule; }
		
		//'touched' | 'released'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'touched'
		public Keyword getTouchedKeyword_0() { return cTouchedKeyword_0; }
		
		//'released'
		public Keyword getReleasedKeyword_1() { return cReleasedKeyword_1; }
	}
	public class RightLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.RightLeft");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRightKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//RightLeft:
		//    'left' | 'right';
		@Override public ParserRule getRule() { return rule; }
		
		//'left' | 'right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//'right'
		public Keyword getRightKeyword_1() { return cRightKeyword_1; }
	}
	public class HorizontalSensorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.tdsl.TDsl.HorizontalSensors");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFrontKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFrontKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftMiddleKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFrontKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cMiddleKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cFrontKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cRightMiddleKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cFrontKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cRightKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cBackwardKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cBackwardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRightKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		
		//HorizontalSensors:
		//    'front' 'left' | 'front' 'left/middle' | 'front' 'middle' | 'front' 'right/middle' | 'front' 'right' | 'backward' 'left' | 'backward' 'right';
		@Override public ParserRule getRule() { return rule; }
		
		//'front' 'left' | 'front' 'left/middle' | 'front' 'middle' | 'front' 'right/middle' | 'front' 'right' | 'backward' 'left' | 'backward' 'right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'front' 'left'
		public Group getGroup_0() { return cGroup_0; }
		
		//'front'
		public Keyword getFrontKeyword_0_0() { return cFrontKeyword_0_0; }
		
		//'left'
		public Keyword getLeftKeyword_0_1() { return cLeftKeyword_0_1; }
		
		//'front' 'left/middle'
		public Group getGroup_1() { return cGroup_1; }
		
		//'front'
		public Keyword getFrontKeyword_1_0() { return cFrontKeyword_1_0; }
		
		//'left/middle'
		public Keyword getLeftMiddleKeyword_1_1() { return cLeftMiddleKeyword_1_1; }
		
		//'front' 'middle'
		public Group getGroup_2() { return cGroup_2; }
		
		//'front'
		public Keyword getFrontKeyword_2_0() { return cFrontKeyword_2_0; }
		
		//'middle'
		public Keyword getMiddleKeyword_2_1() { return cMiddleKeyword_2_1; }
		
		//'front' 'right/middle'
		public Group getGroup_3() { return cGroup_3; }
		
		//'front'
		public Keyword getFrontKeyword_3_0() { return cFrontKeyword_3_0; }
		
		//'right/middle'
		public Keyword getRightMiddleKeyword_3_1() { return cRightMiddleKeyword_3_1; }
		
		//'front' 'right'
		public Group getGroup_4() { return cGroup_4; }
		
		//'front'
		public Keyword getFrontKeyword_4_0() { return cFrontKeyword_4_0; }
		
		//'right'
		public Keyword getRightKeyword_4_1() { return cRightKeyword_4_1; }
		
		//'backward' 'left'
		public Group getGroup_5() { return cGroup_5; }
		
		//'backward'
		public Keyword getBackwardKeyword_5_0() { return cBackwardKeyword_5_0; }
		
		//'left'
		public Keyword getLeftKeyword_5_1() { return cLeftKeyword_5_1; }
		
		//'backward' 'right'
		public Group getGroup_6() { return cGroup_6; }
		
		//'backward'
		public Keyword getBackwardKeyword_6_0() { return cBackwardKeyword_6_0; }
		
		//'right'
		public Keyword getRightKeyword_6_1() { return cRightKeyword_6_1; }
	}
	
	
	private final ThymioDSLElements pThymioDSL;
	private final StatementElements pStatement;
	private final EventElements pEvent;
	private final ActionElements pAction;
	private final MovementActionElements pMovementAction;
	private final SoundActionElements pSoundAction;
	private final ColorBottomActionElements pColorBottomAction;
	private final ColorTopActionElements pColorTopAction;
	private final IfStatementElements pIfStatement;
	private final UpperEventElements pUpperEvent;
	private final ButtonElements pButton;
	private final ProxEventElements pProxEvent;
	private final SensorElements pSensor;
	private final TapEventElements pTapEvent;
	private final ClapEventElements pClapEvent;
	private final ConditionElements pCondition;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final EIntegerObjectElements pEIntegerObject;
	private final EStringElements pEString;
	private final ColorElements pColor;
	private final SoundElements pSound;
	private final State_Horizontal_SensorElements pState_Horizontal_Sensor;
	private final State_Ground_SensorElements pState_Ground_Sensor;
	private final ButtonsElements pButtons;
	private final StateElements pState;
	private final RightLeftElements pRightLeft;
	private final HorizontalSensorsElements pHorizontalSensors;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pThymioDSL = new ThymioDSLElements();
		this.pStatement = new StatementElements();
		this.pEvent = new EventElements();
		this.pAction = new ActionElements();
		this.pMovementAction = new MovementActionElements();
		this.pSoundAction = new SoundActionElements();
		this.pColorBottomAction = new ColorBottomActionElements();
		this.pColorTopAction = new ColorTopActionElements();
		this.pIfStatement = new IfStatementElements();
		this.pUpperEvent = new UpperEventElements();
		this.pButton = new ButtonElements();
		this.pProxEvent = new ProxEventElements();
		this.pSensor = new SensorElements();
		this.pTapEvent = new TapEventElements();
		this.pClapEvent = new ClapEventElements();
		this.pCondition = new ConditionElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pEIntegerObject = new EIntegerObjectElements();
		this.pEString = new EStringElements();
		this.pColor = new ColorElements();
		this.pSound = new SoundElements();
		this.pState_Horizontal_Sensor = new State_Horizontal_SensorElements();
		this.pState_Ground_Sensor = new State_Ground_SensorElements();
		this.pButtons = new ButtonsElements();
		this.pState = new StateElements();
		this.pRightLeft = new RightLeftElements();
		this.pHorizontalSensors = new HorizontalSensorsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.project.tdsl.TDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ThymioDSL returns ThymioDSL:
	//    (statement+=Statement)*;
	public ThymioDSLElements getThymioDSLAccess() {
		return pThymioDSL;
	}
	
	public ParserRule getThymioDSLRule() {
		return getThymioDSLAccess().getRule();
	}
	
	//Statement returns Statement:
	//    '->' event=Event
	//    (ifstatement+=IfStatement | action+=Action)+;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Event returns Event:
	//    UpperEvent | ProxEvent | TapEvent | ClapEvent;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Action returns Action:
	//    '-' (MovementAction | SoundAction | ColorBottomAction | ColorTopAction);
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//MovementAction returns MovementAction:
	//    'drive' direction=("forward" | "backward") ('with' 'speed' speed=ArithmeticExpression)?
	//    | 'turn' direction=RightLeft
	//    | {MovementAction} 'stop' direction='driving'
	//    | {MovementAction} 'stop' direction='turning';
	public MovementActionElements getMovementActionAccess() {
		return pMovementAction;
	}
	
	public ParserRule getMovementActionRule() {
		return getMovementActionAccess().getRule();
	}
	
	//SoundAction returns SoundAction:
	//    'play' 'sound' sound=Sound
	//    | {SoundAction} 'stop' 'playing' 'sound';
	public SoundActionElements getSoundActionAccess() {
		return pSoundAction;
	}
	
	public ParserRule getSoundActionRule() {
		return getSoundActionAccess().getRule();
	}
	
	//ColorBottomAction returns ColorBottomAction:
	//    'set' 'bottom' 'color' 'to' color=Color
	//    | {ColorBottomAction} 'turn' 'off' 'bottom' 'leds';
	public ColorBottomActionElements getColorBottomActionAccess() {
		return pColorBottomAction;
	}
	
	public ParserRule getColorBottomActionRule() {
		return getColorBottomActionAccess().getRule();
	}
	
	//ColorTopAction returns ColorTopAction:
	//    'set' 'top' 'color' 'to' color=Color
	//    | {ColorTopAction} 'turn' 'off' 'top' 'leds';
	public ColorTopActionElements getColorTopActionAccess() {
		return pColorTopAction;
	}
	
	public ParserRule getColorTopActionRule() {
		return getColorTopActionAccess().getRule();
	}
	
	//IfStatement returns IfStatement:
	//    'If' condition=Condition ':'
	//    (action+=Action)+
	//    'End' 'if';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//UpperEvent returns UpperEvent:
	//    'On' button+=Button ('and' button+=Button)* 'button' state=State 'do' ':';
	public UpperEventElements getUpperEventAccess() {
		return pUpperEvent;
	}
	
	public ParserRule getUpperEventRule() {
		return getUpperEventAccess().getRule();
	}
	
	//Button returns Button:
	//    name = Buttons;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//ProxEvent returns ProxEvent:
	//    'On' sensor=Sensor 'do' ':';
	public ProxEventElements getProxEventAccess() {
		return pProxEvent;
	}
	
	public ParserRule getProxEventRule() {
		return getProxEventAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    direction=HorizontalSensors sensor_type='horizontal' 'sensor' 'detecting' state = State_Horizontal_Sensor
	//    | direction=RightLeft sensor_type='ground' 'sensor' 'detecting' state = State_Ground_Sensor;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//TapEvent returns Event:
	//    {TapEvent} 'On' 'tap' 'do' ':';
	public TapEventElements getTapEventAccess() {
		return pTapEvent;
	}
	
	public ParserRule getTapEventRule() {
		return getTapEventAccess().getRule();
	}
	
	//ClapEvent returns Event:
	//    {ClapEvent} 'On' 'clap' 'do' ':';
	public ClapEventElements getClapEventAccess() {
		return pClapEvent;
	}
	
	public ParserRule getClapEventRule() {
		return getClapEventAccess().getRule();
	}
	
	//Condition returns Condition:
	//    leftSensor=Sensor (operator=('and' | 'or') rightSensor=Sensor)?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ArithmeticExpression returns ArithmeticExpression:
	//    left=EIntegerObject (operator=('+' | '-' | '*' | '/' | 'mod') right=EIntegerObject)?;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	////-----------------------------LITERALS OR CONSTANTS------------------------------------------
	//EIntegerObject returns ecore::EIntegerObject:
	//    '-'? INT;
	public EIntegerObjectElements getEIntegerObjectAccess() {
		return pEIntegerObject;
	}
	
	public ParserRule getEIntegerObjectRule() {
		return getEIntegerObjectAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Color:
	//    ('red' | 'green' | 'blue' | 'black' | 'white' | 'yellow' | 'pink' | 'orange');
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Sound:
	//    'sound1' | 'sound2' | 'sound3' | 'sound4';
	public SoundElements getSoundAccess() {
		return pSound;
	}
	
	public ParserRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//State_Horizontal_Sensor:
	//    'proximity' | 'no' 'proximity';
	public State_Horizontal_SensorElements getState_Horizontal_SensorAccess() {
		return pState_Horizontal_Sensor;
	}
	
	public ParserRule getState_Horizontal_SensorRule() {
		return getState_Horizontal_SensorAccess().getRule();
	}
	
	//State_Ground_Sensor:
	//'proximity' | 'no' 'proximity' | 'black' | 'white';
	public State_Ground_SensorElements getState_Ground_SensorAccess() {
		return pState_Ground_Sensor;
	}
	
	public ParserRule getState_Ground_SensorRule() {
		return getState_Ground_SensorAccess().getRule();
	}
	
	//Buttons:
	//    'center' | 'right' | 'left' | 'forward' | 'backward';
	public ButtonsElements getButtonsAccess() {
		return pButtons;
	}
	
	public ParserRule getButtonsRule() {
		return getButtonsAccess().getRule();
	}
	
	//State:
	//    'touched' | 'released';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//RightLeft:
	//    'left' | 'right';
	public RightLeftElements getRightLeftAccess() {
		return pRightLeft;
	}
	
	public ParserRule getRightLeftRule() {
		return getRightLeftAccess().getRule();
	}
	
	//HorizontalSensors:
	//    'front' 'left' | 'front' 'left/middle' | 'front' 'middle' | 'front' 'right/middle' | 'front' 'right' | 'backward' 'left' | 'backward' 'right';
	public HorizontalSensorsElements getHorizontalSensorsAccess() {
		return pHorizontalSensors;
	}
	
	public ParserRule getHorizontalSensorsRule() {
		return getHorizontalSensorsAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
