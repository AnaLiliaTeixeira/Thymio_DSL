/*
 * generated by Xtext 2.34.0.M2
 */
package org.xtext.project.tdsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.project.tdsl.services.TDslGrammarAccess;

@SuppressWarnings("all")
public class TDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ClapEvent_TapEvent___OnKeyword_1_ClapKeyword_2_DoKeyword_3_ColonKeyword_4___or___OnKeyword_1_TapKeyword_2_DoKeyword_3_ColonKeyword_4__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TDslGrammarAccess) access;
		match_ClapEvent_TapEvent___OnKeyword_1_ClapKeyword_2_DoKeyword_3_ColonKeyword_4___or___OnKeyword_1_TapKeyword_2_DoKeyword_3_ColonKeyword_4__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getClapEventAccess().getOnKeyword_1()), new TokenAlias(false, false, grammarAccess.getClapEventAccess().getClapKeyword_2()), new TokenAlias(false, false, grammarAccess.getClapEventAccess().getDoKeyword_3()), new TokenAlias(false, false, grammarAccess.getClapEventAccess().getColonKeyword_4())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTapEventAccess().getOnKeyword_1()), new TokenAlias(false, false, grammarAccess.getTapEventAccess().getTapKeyword_2()), new TokenAlias(false, false, grammarAccess.getTapEventAccess().getDoKeyword_3()), new TokenAlias(false, false, grammarAccess.getTapEventAccess().getColonKeyword_4())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ClapEvent_TapEvent___OnKeyword_1_ClapKeyword_2_DoKeyword_3_ColonKeyword_4___or___OnKeyword_1_TapKeyword_2_DoKeyword_3_ColonKeyword_4__.equals(syntax))
				emit_ClapEvent_TapEvent___OnKeyword_1_ClapKeyword_2_DoKeyword_3_ColonKeyword_4___or___OnKeyword_1_TapKeyword_2_DoKeyword_3_ColonKeyword_4__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('On' 'tap' 'do' ':') | ('On' 'clap' 'do' ':')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_ClapEvent_TapEvent___OnKeyword_1_ClapKeyword_2_DoKeyword_3_ColonKeyword_4___or___OnKeyword_1_TapKeyword_2_DoKeyword_3_ColonKeyword_4__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
