/*
 * generated by Xtext 2.34.0
 */
package org.xtext.project.tdsl.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import thymio_DSL.Action
import thymio_DSL.Button
import thymio_DSL.ClapEvent
import thymio_DSL.ColorBottomAction
import thymio_DSL.ColorTopAction
import thymio_DSL.MovementAction
import thymio_DSL.ProxEvent
import thymio_DSL.Sensor
import thymio_DSL.SoundAction
import thymio_DSL.Statement
import thymio_DSL.TapEvent
import thymio_DSL.ThymioDSL
import thymio_DSL.UpperEvent
import java.util.ArrayList
import thymio_DSL.IfStatement

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TDslGenerator extends AbstractGenerator {

	@Inject TDslInterpreter interpreter

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.toIterable.filter(typeof(ThymioDSL)).forEach[generate(it, fsa)]
	}
	
	def generate(ThymioDSL model, IFileSystemAccess2 fsa) {
		val code = model.toThymioCode
		fsa.generateFile('thymio.aesl', code)
	}

	def String toThymioCode(ThymioDSL model) {
		val builder = new StringBuilder
		val soundConfigured = newArrayList(false)
		val clapConfigured = newArrayList(false)
		model.statement.forEach [ statement |
			statement.action.forEach [ action |
				if (action instanceof SoundAction && !soundConfigured.get(0)) {
					builder.append(
						'# variables for notes\n' + 'var notes[6]\n' + 'var durations[6]\n' + 'var note_index = 6\n' +
							'var note_count = 6\n' + 'var wave[142]\n' + 'var i\n' + 'var wave_phase\n' +
							'var wave_intensity\n\n' + '# compute a sinus wave for sound\n' + 'for i in 0:141 do\n' +
							'	wave_phase = (i-70)*468\n' + '	call math.cos(wave_intensity, wave_phase)\n' +
							'	wave[i] = wave_intensity/256\n' + 'end\n' + 'call sound.wave(wave)')
					soundConfigured.set(0, true)
				}
			]
			builder.append('\n')
		]
		builder.append(
			'# reset outputs \n' + 'call sound.system(-1)\n' + 'call leds.top(0,0,0)\n' +
				'call leds.bottom.left(0,0,0)\n' + 'call leds.bottom.right(0,0,0)\n' +
				'call leds.circle(0,0,0,0,0,0,0,0)\n\n')

		if (soundConfigured.get(0)) {
			builder.append(
				'# when a note is finished, play the next note\n' + 'onevent sound.finished \n' +
					'	if note_index != note_count then\n' +
					'		call sound.freq(notes[note_index], durations[note_index])\n' +
					'		note_index += 1\n' + '	end\n\n')
		}
		// Separate the statements by event type
		val upperEvents = new ArrayList<Statement>
		val proxEvents = new ArrayList<Statement>
		val tapEvents = new ArrayList<Statement>
		val clapEvents = new ArrayList<Statement>
		model.statement.forEach [ statement |

			if (statement.event instanceof UpperEvent) {
				upperEvents.add(statement)
			} else if (statement.event instanceof ProxEvent) {
				proxEvents.add(statement)
			} else if (statement.event instanceof TapEvent) {
				tapEvents.add(statement)
			} else if (statement.event instanceof ClapEvent) {

				if (!clapConfigured.get(0)) {
					builder.append('# setup threshold for detecting claps\n')
					builder.append('mic.threshold = 250\n\n')
					clapConfigured.set(0, true)
				}
				clapEvents.add(statement)
			}
		]

		// Process UpperEvents
		upperEvents.forEach [ statement |
			if (upperEvents.indexOf(statement) == 0)
				builder.append('onevent buttons\n')
			builder.append(statement.toThymioCode)
			builder.append('\n')

		]

		// Process ProxEvents
		proxEvents.forEach [ statement |
			if (proxEvents.indexOf(statement) == 0)
				builder.append('onevent prox\n')
			builder.append(statement.toThymioCode)
			builder.append('\n')

		]

		// Process TapEvents
		tapEvents.forEach [ statement |
			if (tapEvents.indexOf(statement) == 0)
				builder.append('onevent tap\n')
			builder.append(statement.toThymioCode)
			builder.append('\n')
		]

		clapEvents.forEach [ statement |
			if (clapEvents.indexOf(statement) == 0)
				builder.append('onevent mic\n')
			builder.append(statement.toThymioCode)
			builder.append('\n')
		]

		builder.toString
	}

	/**
	 * 
	 */
	def String toThymioCode(Statement statement) {
		val eventCode = new StringBuilder

		if (statement.event instanceof UpperEvent) {
			val upperEvent = statement.event as UpperEvent

			eventCode.append('    when ')
			for (var i = 0; i < upperEvent.button.size(); i++) {
				val button = upperEvent.button.get(i)
				if (i > 0) {
					eventCode.append(' and ')
				}
				eventCode.append('button.' + button.name + ' == 1')
			}
			eventCode.append(' do\n')

		} else if (statement.event instanceof ProxEvent) {
			val proxEvent = statement.event as ProxEvent

			eventCode.append('    when ')
			eventCode.append(diretionToThymioSensor(proxEvent.sensor) + ' ' + stateToThymioSensor(proxEvent.sensor))
			eventCode.append(' do\n')
		}

		// Append the actions
		for (Action action : statement.action) {
			eventCode.append('        ' + action.toThymioCode() + '\n')
		}
		for (IfStatement ifStatement : statement.ifstatement) {
			eventCode.append('        ' + ifStatement.toThymioCode() + '\n')
		}
		if (!(statement.event instanceof ClapEvent) && !(statement.event instanceof TapEvent)) {
			eventCode.append('end\n')
		}

		eventCode.toString
	}

	def String toThymioCode(IfStatement ifStatement) {
		val builder = new StringBuilder;
		builder.append('if ')
		builder.append(diretionToThymioSensor(ifStatement.condition.leftSensor) + ' ')
		builder.append(stateToThymioSensor(ifStatement.condition.leftSensor) + ' ')
		if (ifStatement.condition.rightSensor !== null) {
			builder.append(ifStatement.condition.operator + ' ')
			builder.append(diretionToThymioSensor(ifStatement.condition.rightSensor) + ' ')
			builder.append(stateToThymioSensor(ifStatement.condition.rightSensor) + ' ')
		}
		builder.append('then\n')
		ifStatement.action.forEach [ action |
			builder.append('    ' + action.toThymioCode + '\n')
		]
		builder.append('end\n')
		return builder.toString()
	}

	def String toThymioCode(Action action) {
		if (action instanceof MovementAction) {
			if (action.direction == 'right') {
				return 'motor.left.target = 500\n        motor.right.target = -500'
			} else if (action.direction == 'left') {
				return 'motor.left.target = -500\n        motor.right.target = 500'
			} else if (action.direction == 'forward') {
				if (action.speed === null)
					return 'motor.left.target = 500\n        motor.right.target = 500'
				else {
					var speed = interpreter.interpret(action.speed)
					return 'motor.left.target = ' + speed + '\n        motor.right.target = ' + speed

				}
			} else if (action.direction == 'backward') {
				if (action.speed === null)
					return 'motor.left.target = -500\n        motor.right.target = -500'
				else {
					var speed = interpreter.interpret(action.speed)
					return 'motor.left.target = ' + speed + '\n        motor.right.target = ' + speed
				}
			} else if (action.direction == 'driving' || action.direction == 'turning') {
				return 'motor.left.target = 0\n        motor.right.target = 0'
			}
		} else if (action instanceof ColorTopAction) {
			if (action.color == 'red') {
				return 'call leds.top(32,0,0)        '
			} else if (action.color == 'green') {
				return 'call leds.top(0,32,0)        '
			} else if (action.color == 'blue') {
				return 'call leds.top(0,0,32)        '
			} else if (action.color == 'white') {
				return 'call leds.top(32,32,32)        '
			} else if (action.color == 'black') {
				return 'call leds.top(0,0,0)        '
			} else if (action.color == 'pink') {
				return 'call leds.top(32,0,32)        '
			} else if (action.color == 'yellow') {
				return 'call leds.top(32,32,0)        '
			} else if (action.color == 'orange') {
				return 'call leds.top(32,16,0)        '
			}
		} else if (action instanceof ColorBottomAction) {
			if (action.color == 'red') {
				return 'call leds.bottom.left(32,0,0)\n call leds.bottom.right(32,0,0)       '
			} else if (action.color == 'green') {
				return 'call leds.bottom.left(0,32,0)\n call leds.bottom.right(0,32,0) '
			} else if (action.color == 'blue') {
				return 'call leds.bottom.left(0,0,32)\n call leds.bottom.right(0,0,32)        '
			} else if (action.color == 'white') {
				return 'call leds.bottom.left(32,32,32)\n call leds.bottom.right(32,32,32)'
			} else if (action.color == 'black') {
				return 'call leds.bottom.left(0,0,0)\n call leds.bottom.right(0,0,0)         '
			} else if (action.color == 'pink') {
				return 'call leds.bottom.left(32,0,32)\n call leds.bottom.right(32,0,32) 	'
			} else if (action.color == 'yellow') {
				return 'call leds.bottom.left(32,32,0)\n call leds.bottom.right(32,32,0)        '
			} else if (action.color == 'orange') {
				return 'call leds.bottom.left(32,16,0)\n call all leds.bottom.right(32,16,0)         '
			}
		} else if (action instanceof SoundAction) {
			if (action.sound == 'sound1') {
				return '	call math.copy(notes[0:5], [524, 440, 370, 311, 440, 262]) \n' +
					'	call math.copy(durations[0:5], [7, 7, 7, 7, 7, 7]) \n' + '	note_index = 1 \n' +
					'	note_count = 6 \n' + '	call sound.freq(notes[0], durations[0])\n'
			} else if (action.sound == 'sound2') {
				return '	call math.copy(notes[0:5], [311, 440, 311, 524, 440, 311]) \n' +
					'	call math.copy(durations[0:5], [7, 14, 14, 14, 14, 14]) \n' + '	note_index = 1 \n' +
					'	note_count = 6 \n' + '	call sound.freq(notes[0], durations[0])\n'
			} else if (action.sound == 'sound3') {
				return '	call math.copy(notes[0:5], [311, 440, 370, 0, 440, 311]) \n' +
					'	call math.copy(durations[0:5], [7, 14, 7, 14, 7, 14]) \n' + '	note_index = 1 \n' +
					'	note_count = 6 \n' + '	call sound.freq(notes[0], durations[0])\n'
			} else if (action.sound == 'sound4') {
				return '	call math.copy(notes[0:5], [262, 440, 524, 311, 370, 262]) \n' +
					'	call math.copy(durations[0:5], [7, 14, 14, 7, 14, 14]) \n' + '	note_index = 1 \n' +
					'	note_count = 6 \n' + '	call sound.freq(notes[0], durations[0])\n'
			}
		}
		return ''
	}

	def String toThymioCode(Button button) {
		switch button {
			case 'center': 'center'
			case 'left': 'left'
			case 'right': 'right'
			case 'forward': 'forward'
			case 'backward': 'backward'
			default: ''
		}
	}

	def String diretionToThymioSensor(Sensor sensor) {
		if (sensor.sensor_type.equals("ground")) {
			if (sensor.direction.equals("left")) {
				return "prox.ground.delta[0]"
			} else if (sensor.direction.equals("right")) {
				return "prox.ground.delta[1]"
			}

		} else if (sensor.sensor_type.equals("horizontal")) {
			if (sensor.direction.equals("left")) {
			} else if (sensor.direction.contains("left/middle")) {
				return "prox.horizontal[1]"
			} else if (sensor.direction.contains("right/middle")) {
				return "prox.horizontal[3]"
			} else if (sensor.direction.contains("front left")) {
				return "prox.horizontal[0]"
			} else if (sensor.direction.contains("front right")) {
				return "prox.horizontal[4]"
			} else if (sensor.direction.contains("front middle")) {
				return "prox.horizontal[2]"
			} else if (sensor.direction.contains("backward left")) {
				return "prox.horizontal[5]"
			} else if (sensor.direction.contains("backward right")) {
				return "prox.horizontal[6]"
			}
		}
		return ''
	}

	def String stateToThymioSensor(Sensor sensor) {
		if (sensor.sensor_type.equals("ground")) {
			if (sensor.state.equals("white")) {
				return "> 450"
			} else if (sensor.state.equals("black")) {
				return "< 400"
			} else if (sensor.state.contains("no proximity")) {
				return "<= 400"
			} else if (sensor.state.equals("proximity")) {
				return ">= 450"
			}

		} else if (sensor.sensor_type == "horizontal") {
			if (sensor.state.contains("no proximity")) {
				return "<= 1000"
			} else if (sensor.state.equals("proximity")) {
				return ">= 2000"
			}
		}
		return ''
	}
}
