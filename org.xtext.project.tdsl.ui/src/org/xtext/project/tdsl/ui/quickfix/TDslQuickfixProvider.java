/*
 * generated by Xtext 2.34.0
 */
package org.xtext.project.tdsl.ui.quickfix;

import org.eclipse.jface.text.BadLocationException;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.xtext.project.tdsl.validation.TDslValidator;

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
public class TDslQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(TDslValidator.)
//	public void capitalizeName(final Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, "Capitalize name", "Capitalize the name.", "upcase.png", new IModification() {
//			public void apply(IModificationContext context) throws BadLocationException {
//				IXtextDocument xtextDocument = context.getXtextDocument();
//				String firstLetter = xtextDocument.get(issue.getOffset(), 1);
//				xtextDocument.replace(issue.getOffset(), 1, firstLetter.toUpperCase());
//			}
//		});
//	}
	
	@Fix(TDslValidator.DUPLICATE_ACTION_WARNING)
	public void removeDuplicateAction(final Issue issue, IssueResolutionAcceptor acceptor) {
	    acceptor.accept(issue, "Remove repeted action", "Removed repeted action", null, context -> {
	    	removeRepeted(context.getXtextDocument(), issue, "");
	    });
	}
	
	@Fix(TDslValidator.DUPLICATE_SENSORIF_WARNING)
	public void removeDuplicateSensor(final Issue issue, IssueResolutionAcceptor acceptor) {
	    acceptor.accept(issue, "Remove repeted sensor", "Removed repeted sensor", null, context -> {
	    	removeRepeted(context.getXtextDocument(), issue, "");
	    });
	}
	
	@Fix(TDslValidator.DUPLICATE_BUTTON_WARNING)
	public void removeDuplicateButtonSensor(final Issue issue, IssueResolutionAcceptor acceptor) {
	    acceptor.accept(issue, "Remove repeted button", "Removed repeted button", null, context -> {
	    	removeRepeted(context.getXtextDocument(), issue, "");
	    });
	}
	
	@Fix(TDslValidator.SPEED_GT_500_WARNING)
	public void setSpeedTo500(final Issue issue, IssueResolutionAcceptor acceptor) {
	    acceptor.accept(issue, "Set speed to 500", "Set speed to 500", null, context -> {
	    	removeRepeted(context.getXtextDocument(), issue, "500");
	    });
	}
	

	
	
	@Fix(TDslValidator.NEGATIVE_SPEED_WARNING)
	public void updateNegativeValues(final Issue issue, IssueResolutionAcceptor acceptor) {
	    acceptor.accept(issue, "Insert a positive value", "Inserte a positive value", null, context -> {
	    	removeRepeted(context.getXtextDocument(), issue, removeMinus(context.getXtextDocument(),issue));
	    });
	}
	

	
	
	protected void removeRepeted(IXtextDocument iXtextDocument, Issue issue, String newSpecifier) throws BadLocationException {
        iXtextDocument.replace(issue.getOffset(), issue.getLength(), newSpecifier);
	}
	
	protected String removeMinus(IXtextDocument iXtextDocument, Issue issue) throws BadLocationException {
	    return iXtextDocument.get(issue.getOffset(), issue.getLength()).substring(1, issue.getLength());
	}
	

}
