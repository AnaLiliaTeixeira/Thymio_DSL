/*
 * generated by Xtext 2.34.0
 */
package org.xtext.project.tdsl.ui.quickfix;

import org.eclipse.jface.text.BadLocationException;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.xtext.project.tdsl.validation.TDslValidator;

/**
 * Custom quickfixes.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
public class TDslQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(TDslValidator.DUPLICATE_EVENT_WARNING)
	public void removeDuplicateEvent(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove repeated event", "Removed repeated event", null, context -> {
			removeRepeated(context.getXtextDocument(), issue, "");
		});
	}

	@Fix(TDslValidator.DUPLICATE_ACTION_WARNING)
	public void removeDuplicateAction(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove repeated action", "Removed repeated action", null, context -> {
			removeRepeated(context.getXtextDocument(), issue, "");
		});
	}

	@Fix(TDslValidator.CONTRADICTORY_ACTION_ERROR)
	public void removeContradictoryAction(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove contradictory action", "Removed contradictory action", null, context -> {
			removeRepeated(context.getXtextDocument(), issue, "");
		});
	}

	@Fix(TDslValidator.DUPLICATE_SENSORIF_WARNING)
	public void removeDuplicateSensor(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove repeated sensor", "Removed repeated sensor", null, context -> {
			String content = context.getXtextDocument().get(issue.getOffset(), issue.getLength());
			int end_index = issue.getLength();
			if(content.contains(" and ")) {
				end_index = content.indexOf(" and ");
			}
			if(content.contains(" or ")) {
				end_index = content.indexOf(" or ");
			}
			
			removeRepeated(context.getXtextDocument(), issue, content.substring(0, end_index));
		});
	}

	@Fix(TDslValidator.CONTRADICTORY_IF_WARNING)
	public void removeContradictorySensor(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove repeated sensor", "Removed repeated sensor", null, context -> {
			String content = context.getXtextDocument().get(issue.getOffset(), issue.getLength());
			int end_index = issue.getLength();
			if(content.contains(" and ")) {
				end_index = content.indexOf(" and ");
			}
			if(content.contains(" or ")) {
				end_index = content.indexOf(" or ");
			}
			
			removeRepeated(context.getXtextDocument(), issue, content.substring(0, end_index));
		});
	}

	@Fix(TDslValidator.DUPLICATE_BUTTON_WARNING)
	public void removeDuplicateButtonSensor(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove repeated button", "Removed repeated button", null, context -> {
			context.getXtextDocument().replace(issue.getOffset()-5, issue.getLength()+5, "");
		});
	}

	@Fix(TDslValidator.SPEED_GT_500_WARNING)
	public void setSpeedTo500(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Set speed to 500", "Set speed to 500", null, context -> {
			removeRepeated(context.getXtextDocument(), issue, "500");
		});
	}

	@Fix(TDslValidator.NEGATIVE_SPEED_WARNING)
	public void updateNegativeValues(final Issue issue, IssueResolutionAcceptor acceptor) {

		acceptor.accept(issue, "Insert a positive value", "Inserted a positive value", null, context -> {

			removeRepeated(context.getXtextDocument(), issue, removeMinus(context.getXtextDocument(), issue));
		});
	}

	@Fix(TDslValidator.DUPLICATED_IF_STATEMENT_WARNING)
	public void removeDuplicateIfStatement(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove repeated if statement", "Removed repeated if statement", null, context -> {
			removeRepeated(context.getXtextDocument(), issue, "");
		});
	}

	@Fix(TDslValidator.TURN_OFF_TOP_LEDS_WARNING)
	public void removeTurnOffTopLeds(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove turn off top leds", "Removed turn off top leds", null, context -> {
			removeRepeated(context.getXtextDocument(), issue, "");
		});
	}

	@Fix(TDslValidator.TURN_OFF_BOTTOM_LEDS_WARNING)
	public void removeTurnOffBottomLeds(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove turn off bottom leds", "Removed turn off bottom leds", null, context -> {
			removeRepeated(context.getXtextDocument(), issue, "");
		});
	}
	@Fix(TDslValidator.SENSOR_EQUALS_IF_STATEMENT_WARNING)
	public void removeSensorEqualIfStatement(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove redundant if statement", "Removed redundant if statement", null, context -> {
			removeRepeated(context.getXtextDocument(), issue, "");
		});
	}
	
	@Fix(TDslValidator.NO_ACTIONS_ERROR)
	public void addAction(final Issue issue, IssueResolutionAcceptor acceptor) {

		acceptor.accept(issue, "Add action to statement", "Added action to statement", null, context -> {
			String initial_content = context.getXtextDocument().get(issue.getOffset(), issue.getLength());
			String content = initial_content;
			if (content.startsWith("If"))
				content = content.substring(0, content.length()-6);

			StringBuilder sb = new StringBuilder(content + "\n	- drive forward");
			if (initial_content.endsWith("End if"))
				sb.append("\n	End if");

			System.out.println(sb.toString());
			removeRepeated(context.getXtextDocument(), issue, sb.toString());
		});
	}

	protected void removeRepeated(IXtextDocument iXtextDocument, Issue issue, String newSpecifier)
			throws BadLocationException {
		iXtextDocument.replace(issue.getOffset(), issue.getLength(), newSpecifier);
	}

	protected String removeMinus(IXtextDocument iXtextDocument, Issue issue) throws BadLocationException {
		return iXtextDocument.get(issue.getOffset(), issue.getLength()).substring(1, issue.getLength());
	}
	


}
