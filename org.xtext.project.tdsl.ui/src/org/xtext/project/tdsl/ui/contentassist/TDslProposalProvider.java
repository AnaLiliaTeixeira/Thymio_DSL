/*
 * generated by Xtext 2.34.0
 */
package org.xtext.project.tdsl.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import thymio_DSL.Action;
import thymio_DSL.Button;
import thymio_DSL.Event;
import thymio_DSL.ProxEvent;
import thymio_DSL.SoundAction;
import thymio_DSL.Statement;
import thymio_DSL.UpperEvent;
import thymio_DSL.MovementAction;

/**
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class TDslProposalProvider extends AbstractTDslProposalProvider {

	@Override
	public void complete_Statement(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("->", context));

	}

	@Override
	public void complete_Event(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof Statement) {
			Statement statement = (Statement) model;
			if (statement.getEvent() == null) {
				acceptor.accept(createCompletionProposal("On forward button", context));
				acceptor.accept(createCompletionProposal("On backward button", context));
				acceptor.accept(createCompletionProposal("On left button", context));
				acceptor.accept(createCompletionProposal("On right button", context));
				acceptor.accept(createCompletionProposal("On center button", context));
				acceptor.accept(createCompletionProposal("On front left", context));
				acceptor.accept(createCompletionProposal("On front left/middle", context));
				acceptor.accept(createCompletionProposal("On front right", context));
				acceptor.accept(createCompletionProposal("On front right/middle", context));
				acceptor.accept(createCompletionProposal("On front middle", context));
				acceptor.accept(createCompletionProposal("On backward left", context));
				acceptor.accept(createCompletionProposal("On backward right", context));
				acceptor.accept(createCompletionProposal("On clap do :", context));
				acceptor.accept(createCompletionProposal("On tap do :", context));
			}
		}
	}

	@Override
	public void complete_UpperEvent(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof UpperEvent) {
			UpperEvent statement = (UpperEvent) model;
			if (!statement.getButton().isEmpty()) {
				if (statement.getState() == null)
					acceptor.accept(createCompletionProposal("touched do :", context));
				acceptor.accept(createCompletionProposal("released do :", context));
			}
		}
	}

	@Override
	public void complete_ProxEvent(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof ProxEvent) {
			ProxEvent statement = (ProxEvent) model;
			if (statement.getSensor().getSensor_type() == null && statement.getSensor().getDirection() != null) {
				String direction = statement.getSensor().getDirection();
				if (direction.equals("front left") || direction.equals("front left/middle")
						|| direction.equals("front middle") || direction.equals("front right/middle")
						|| direction.equals("front right") || direction.equals("backward left")
						|| direction.equals("backward right")) {
					acceptor.accept(createCompletionProposal("horizontal sensor detecting", context));
				} else {
					acceptor.accept(createCompletionProposal("ground sensor detecting", context));
				}
			} else if (statement.getSensor().getSensor_type() != null && statement.getSensor().getDirection() != null
					&& statement.getSensor().getState() == null) {
				acceptor.accept(createCompletionProposal("black", context));
				acceptor.accept(createCompletionProposal("white", context));
				acceptor.accept(createCompletionProposal("no proximity", context));
				acceptor.accept(createCompletionProposal("proximity", context));
			}
		}

	}

	@Override
	public void complete_Action(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof Action) {
			acceptor.accept(createCompletionProposal("drive", context));
			acceptor.accept(createCompletionProposal("turn", context));
			acceptor.accept(createCompletionProposal("play sound", context));
			acceptor.accept(createCompletionProposal("set", context));
			acceptor.accept(createCompletionProposal("stop driving", context));
			acceptor.accept(createCompletionProposal("stop turning", context));
		}
	}

	@Override
	public void complete_IfStatement(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("If", context));
		acceptor.accept(createCompletionProposal("End if", context));

	}


	@Override
	public void completeStatement_Event(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeStatement_Ifstatement(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeStatement_Action(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeMovementAction_Direction(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof MovementAction) {
			MovementAction move = (MovementAction) model;
			if(move.getDirection() == null) {
				acceptor.accept(createCompletionProposal("forward", context));
				acceptor.accept(createCompletionProposal("backward", context));
				acceptor.accept(createCompletionProposal("forward with speed", context));
				acceptor.accept(createCompletionProposal("backward with speed", context));
			}
			
		}
		
	}

	@Override
	public void completeSoundAction_Sound(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
		
		if(model instanceof SoundAction) {
			SoundAction sound = (SoundAction) model;
			if(sound.getSound() == null) {
				acceptor.accept(createCompletionProposal("sound1", context));
				acceptor.accept(createCompletionProposal("sound2", context));
				acceptor.accept(createCompletionProposal("sound3", context));
				acceptor.accept(createCompletionProposal("sound4", context));
			}
		}
	}

	@Override
	public void completeColorBottomAction_Color(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeColorTopAction_Color(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeIfStatement_Condition(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeIfStatement_Action(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeUpperEvent_Button(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeUpperEvent_State(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeButton_Name(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeProxEvent_Sensor(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeSensor_Direction(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeSensor_Sensor_type(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		// subclasses may override
	}

	@Override
	public void completeSensor_State(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeCondition_LeftSensor(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeCondition_Operator(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		// subclasses may override
	}

	@Override
	public void completeCondition_RightSensor(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeArithmeticExpression_Left(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}

	@Override
	public void completeArithmeticExpression_Operator(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// subclasses may override
	}

	@Override
	public void completeArithmeticExpression_Right(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
	}
}
